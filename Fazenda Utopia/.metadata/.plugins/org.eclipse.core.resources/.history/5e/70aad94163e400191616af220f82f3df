package br.com.fazendoutopia.bean;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.event.ActionEvent;
import javax.imageio.ImageIO;
import javax.servlet.http.Part;

import org.omnifaces.util.Messages;

import br.com.fazendoutopia.dao.CategoriaCestasDAO;
import br.com.fazendoutopia.dao.CestaDAO;
import br.com.fazendoutopia.dao.ProdutoDAO;
import br.com.fazendoutopia.domain.CategoriaCesta;
import br.com.fazendoutopia.domain.Cesta;
import br.com.fazendoutopia.domain.Produto;

@SuppressWarnings("serial")
@ManagedBean
@ViewScoped
public class CestaBean implements Serializable {

	private Cesta cesta;
	private List<Cesta> cestas;
	private List<CategoriaCesta> categoriacestas;
	private List<Produto> produtos;

	private Part img;

	@PostConstruct
	public void listar() {

		try {

			CestaDAO dao = new CestaDAO();
			cestas = dao.listar();

			ProdutoDAO dao1 = new ProdutoDAO();
			produtos = dao1.listar();

			CategoriaCestasDAO dao2 = new CategoriaCestasDAO();
			categoriacestas = dao2.listar();

		} catch (RuntimeException e) {
			Messages.addGlobalError("Ocorreu um erro ao tentar listar as cestas!");
			e.printStackTrace();

		}

	}

	public void novo() {
		cesta = new Cesta();
	}

	public void salvar() throws IOException {

		try {

			/* processando imagem */
			byte[] imagemByte = getByte(img.getInputStream());
			cesta.setImagemBase64(imagemByte); /* salva imagem original */

			/* transformar em buffere */
			BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(imagemByte));

			/*
			 * pegar o tipo da imagem = se for = ou diferente de 0 pega o ARGB
			 * senao getuype
			 */
			int type = bufferedImage.getType() == 0 ? BufferedImage.TYPE_INT_ARGB : bufferedImage.getType();

			int largura = 200;
			int altura = 200;

			CestaDAO dao = new CestaDAO();
			dao.merge(cesta);
			cesta = new Cesta();
			cestas = dao.listar();

			ProdutoDAO dao1 = new ProdutoDAO();
			produtos = dao1.listar();

			CategoriaCestasDAO dao2 = new CategoriaCestasDAO();
			categoriacestas = dao2.listar();

			Messages.addGlobalInfo("Cesta salva com sucesso!");
		} catch (RuntimeException e) {
			Messages.addGlobalError("Ocorreu um erro ao tentar salvar as cestas!");
			e.printStackTrace();

		}

	}

	public void excluir(ActionEvent evento) {
		try {
			Messages.addGlobalInfo("Cesta removida com sucesso!");
		} catch (RuntimeException e) {
			Messages.addGlobalError("Ocorreu um erro ao tentar excluir a cesta!");
			e.printStackTrace();

		}
	}

	public void editar(ActionEvent evento) {
		try {
			Messages.addGlobalInfo("Cesta alterada com sucesso!");
		} catch (RuntimeException e) {
			Messages.addGlobalError("Ocorreu um erro ao tentar alterar a cesta! " + e);
			e.printStackTrace();

		}
	}

	private byte[] getByte(InputStream is) throws IOException {
		int len;
		int size = 1024;
		byte[] buf = null;
		if (is instanceof ByteArrayInputStream) {
			size = is.available();
			buf = new byte[size];
			len = is.read(buf, 0, size);
		} else {
			ByteArrayOutputStream saida = new ByteArrayOutputStream();
			buf = new byte[size];
			while ((len = is.read(buf, 0, size)) != -1) {
				saida.write(buf, 0, len);
			}
			buf = saida.toByteArray();
		}
		return buf;
	}
}
